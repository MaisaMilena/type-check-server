Parser.text.go(text: String): Parser(Unit)
  (idx,code) 
  case text {
    nil:
      Parser.Reply.value<Unit>(idx, code, Unit.new),
    cons: case code {
      nil:
        let error = String.flatten(["Expected '", text, "', found end of file."]);
        Parser.Reply.error<Unit>(idx, code, error)
      cons:
        if U16.eql(text.head, code.head) then
          Parser.text(text.tail, Nat.succ(idx), code.tail)
        else
          let error = String.flatten(["Expected '", text, "', found '", String.cons(code.head, String.nil), "'."]);
          Parser.Reply.error<Unit>(idx, code, error)
    }
  }